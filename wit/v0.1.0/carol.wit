interface http {
    enum method {
       get,
       post,
       put,
       delete
    }
    record request {
         method: method,
         uri: string,
         headers: list<tuple<string,string>>,
         body: list<u8>,
    }

    record response {
        headers: list<tuple<string,string>>,
        body: list<u8>,
        status: u16
    }
    execute: func(request: request) -> response
}

interface global {
    bls-static-pubkey: func() -> list<u8>
    bls-static-sign: func(message: list<u8>) -> list<u8>
}

interface log {
    info: func(message: string)
}

world machine {
    import http: self.http
    import global: self.global
    import log: self.log

    export machine: interface {
        // use self.http.{request as http-request,response as http-response}
        activate: func(machine-params: list<u8>, input: list<u8>) -> list<u8>
    }
}


// world convert {
//     export convert: interface {
//         json-to-input: func(json: string) -> option<list<u8>>
//     }
// }
