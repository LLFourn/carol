package carol:machine@0.1.0

interface http {
    variant error {
      // The url was invalid
      invalid-url(string),
      // One or more of the headers was invalid
      invalid-header(string),
      // The request timed out
      timeout,
      // There was a connection error
      connection(string),
      // An unexpected error occurred
      unexpected(string)
   }
    enum method {
      get,
      post,
      put,
      patch,
      delete
    }
    record request {
      method: method,
      uri: string,
      headers: list<tuple<string,list<u8>>>,
      body: list<u8>,
    }

    record response {
      headers: list<tuple<string,list<u8>>>,
      body: list<u8>,
      status: u16
    }
    execute: func(request: request) -> result<response,error>
}

interface global {
    bls-static-pubkey: func() -> list<u8>
    bls-static-sign: func(message: list<u8>) -> list<u8>
}

interface log {
    info: func(message: string)
    set-panic-message: func(message: string)
}

interface machines {
    type machine-id = list<u8>

    record panic-info {
        reason: string,
        machine: machine-id
    }
    variant error {
        panic(panic-info)
    }
    self-activate: func(method: string, input: list<u8>) -> result<list<u8>, error>
}


// The guest machine API the host has access to
interface guest {
  use http.{request as http-request,response as http-response}

  record binary-api {
    activations: list<activation-description>,
  }

  record activation-description {
    name: string,
  }

  get-binary-api: func() -> binary-api
  activate: func(machine-params: list<u8>, activation: string, input: list<u8>) -> list<u8>
  handle-http: func(request: http-request) -> http-response
}

world machine {
    import http
    import global
    import log
    import machines

    export guest
}
